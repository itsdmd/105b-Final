[
    {
        "id": "79824697764778fc",
        "type": "tab",
        "label": "CS105b Final",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ae7879d240e5165e",
        "type": "ui_button",
        "z": "79824697764778fc",
        "name": "IconRefresh",
        "group": "70fb931.dfc146c",
        "order": 2,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "Refresh",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-refresh 4x",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "topicType": "str",
        "x": 1310,
        "y": 280,
        "wires": [
            [
                "ab028375cf339bd5"
            ]
        ]
    },
    {
        "id": "3f76722049e20068",
        "type": "ui_text",
        "z": "79824697764778fc",
        "group": "70fb931.dfc146c",
        "order": 6,
        "width": 5,
        "height": "1",
        "name": "Description",
        "label": "",
        "format": "{{msg.payload.current.weather[0].description}}",
        "layout": "row-left",
        "className": "",
        "x": 1310,
        "y": 80,
        "wires": []
    },
    {
        "id": "96dab0dc6d336eb1",
        "type": "ui_text",
        "z": "79824697764778fc",
        "group": "70fb931.dfc146c",
        "order": 4,
        "width": 3,
        "height": "1",
        "name": "Wind",
        "label": "",
        "format": "{{msg.payload.current.wind_speed}}&nbsp;&nbsp;<i class=\"wi wi-darksky-wind\"></i>&nbsp;&nbsp;{{msg.payload.current.wind_cardinal}}",
        "layout": "col-center",
        "className": "",
        "x": 1290,
        "y": 160,
        "wires": []
    },
    {
        "id": "6b68fd5f2e03dfb1",
        "type": "ui_text",
        "z": "79824697764778fc",
        "group": "70fb931.dfc146c",
        "order": 5,
        "width": 3,
        "height": 1,
        "name": "SunriseTime",
        "label": "",
        "format": "<i class=\"wi wi-owm-01d\"></i>&nbsp;<i class=\"fa fa-arrow-up\"></i>&nbsp;&nbsp;{{msg.payload.current.sunrise}}",
        "layout": "row-center",
        "className": "",
        "x": 1310,
        "y": 200,
        "wires": []
    },
    {
        "id": "d7b531d22f718c8b",
        "type": "ui_text",
        "z": "79824697764778fc",
        "group": "70fb931.dfc146c",
        "order": 7,
        "width": 3,
        "height": 1,
        "name": "SunsetTime",
        "label": "",
        "format": "<i class=\"wi wi-wu-sunny\"></i>&nbsp;<i class=\"fa fa-arrow-down\"></i>&nbsp;&nbsp;{{msg.payload.current.sunset}}",
        "layout": "row-center",
        "className": "",
        "x": 1310,
        "y": 240,
        "wires": []
    },
    {
        "id": "2e7cdcd57d80ed35",
        "type": "ui_template",
        "z": "79824697764778fc",
        "group": "70fb931.dfc146c",
        "name": "Forecast Info",
        "order": 8,
        "width": "10",
        "height": "2",
        "format": "<div style=\"height: 100%; justify-content: center; align-items: center;\">\n <div layout=\"rowicons\" layout-align=\"space-around start\" ng-repeat=\"data in msg.payload.rowicons\" style=\"font-size:150%;padding-top: 5px;padding-bottom: 5px\">\n  <span flex style=\"color: black;text-align: center\"><i class=\"wi wi-owm-{{data.cell01}}\"></i></span>\n  <span flex style=\"color: black;text-align: center\"><i class=\"wi wi-owm-{{data.cell02}}\"></i></span>\n  <span flex style=\"color: black;text-align: center\"><i class=\"wi wi-owm-{{data.cell03}}\"></i></span>\n  <span flex style=\"color: black;text-align: center\"><i class=\"wi wi-owm-{{data.cell04}}\"></i></span>\n  <span flex style=\"color: black;text-align: center\"><i class=\"wi wi-owm-{{data.cell05}}\"></i></span>\n  <span flex style=\"color: black;text-align: center\"><i class=\"wi wi-owm-{{data.cell06}}\"></i></span>\n  <span flex style=\"color: #097479;text-align: center\"><i class=\"wi wi-owm-{{data.cell07}}\"></i></span>\n  <span flex style=\"color: #097479;text-align: center\"><i class=\"wi wi-owm-{{data.cell08}}\"></i></span>\n  <span flex style=\"color: #097479;text-align: center\"><i class=\"wi wi-owm-{{data.cell09}}\"></i></span>\n  <span flex style=\"color: #097479;text-align: center\"><i class=\"wi wi-owm-{{data.cell10}}\"></i></span>\n </div>\n <div layout=\"rowtext\" layout-align=\"space-around start\" ng-repeat=\"data in msg.payload.rowtext\" style=\"line-height: 150%\">\n  <span flex style=\"color: black;text-align: center;\">{{data.cell01}}</span>\n  <span flex style=\"color: black;text-align: center\">{{data.cell02}}</span>\n  <span flex style=\"color: black;text-align: center\">{{data.cell03}}</span>\n  <span flex style=\"color: black;text-align: center\">{{data.cell04}}</span>\n  <span flex style=\"color: black;text-align: center\">{{data.cell05}}</span>\n  <span flex style=\"color: black;text-align: center\">{{data.cell06}}</span>\n  <span flex style=\"color: #097479;text-align: center\">{{data.cell07}}</span>\n  <span flex style=\"color: #097479;text-align: center\">{{data.cell08}}</span>\n  <span flex style=\"color: #097479;text-align: center\">{{data.cell09}}</span>\n  <span flex style=\"color: #097479;text-align: center\">{{data.cell10}}</span>\n </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1310,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "81df6592ebe7e563",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Format forecast data",
        "func": "var fcdata = {};\nvar units=flow.get('units');\nif (units===undefined)\n{\n  units=\"imperial\";\n}\n\nfunction formatTemp(high, low){\n    if (units == \"imperial\") {\n        if (low){\n          temp = parseFloat(high).toFixed() + '/' + parseFloat(low).toFixed()\n        }\n        else {\n          temp = parseFloat(high).toFixed() + '°F'\n        }\n    }\n    else { // metric\n        if (low){\n          temp = parseFloat(high).toFixed() + '/' + parseFloat(low).toFixed()\n        }\n        else {\n          temp = parseFloat(high).toFixed() + '°C'\n        }\n    }\n    return temp;\n}\n\nfunction dayName(unixTime){\n  var dateObject = new Date(unixTime * 1000);\n  return dateObject.toLocaleString(flow.get('lang'), { timezone: msg.payload.timezone, weekday: 'short'});\n  // If the line above is not producing the correct short weekday names for the language set by 'lang',\n  //   you can try upgrading to NodeJS version 13 or higher (when full international support was added for the toLocaleString function),\n  //   or you can use the code below which is an example for French short weekday names.\n/*  \n  switch (dateObject.toLocaleString('en', { timezone: msg.payload.timezone, weekday: 'short'})) {\n    case 'Mon':\n      return 'Lun';\n    case 'Tue':\n      return 'Mar';\n    case 'Wed':\n      return 'Mer';\n    case 'Thu':\n      return 'Jeu';\n    case 'Fri':\n      return 'Ven';\n    case 'Sat':\n      return 'Sam';\n    case 'Sun':\n      return 'Dim';\n  }\n*/\n}\n\nfunction timeConvert(UNIX_timestamp){\n  var dateObject = new Date(UNIX_timestamp * 1000);\n  if (flow.get('hour12')) {  // 12 hour time format\n    return dateObject.toLocaleString('en', { timezone: msg.payload.timezone, hour12: true, hour: 'numeric'}).toLowerCase();\n  } else {  // 24 hour time format\n    return dateObject.toLocaleString('en', { timezone: msg.payload.timezone, hour12: false, hour: 'numeric'}) + ':00';\n  }      \n}\n\n// prepare forecast data for CSS based ui widget\nfcdata.payload = {\n  rowtext: {\n  \tdata01: {\n      cell01: timeConvert(msg.payload.hourly[1].dt),\n      cell02: timeConvert(msg.payload.hourly[2].dt),\n      cell03: timeConvert(msg.payload.hourly[3].dt),\n      cell04: timeConvert(msg.payload.hourly[4].dt),\n      cell05: timeConvert(msg.payload.hourly[5].dt),\n      cell06: timeConvert(msg.payload.hourly[6].dt),\n      cell07: dayName(msg.payload.daily[1].dt),\n      cell08: dayName(msg.payload.daily[2].dt),\n      cell09: dayName(msg.payload.daily[3].dt),\n      cell10: dayName(msg.payload.daily[4].dt),\n  \t},\n  \tdata02: {\n       cell01: formatTemp(msg.payload.hourly[1].temp),\n       cell02: formatTemp(msg.payload.hourly[2].temp),\n       cell03: formatTemp(msg.payload.hourly[3].temp),\n       cell04: formatTemp(msg.payload.hourly[4].temp),\n       cell05: formatTemp(msg.payload.hourly[5].temp),\n       cell06: formatTemp(msg.payload.hourly[6].temp),\n       cell07: formatTemp(msg.payload.daily[1].temp.max, msg.payload.daily[0].temp.min),\n       cell08: formatTemp(msg.payload.daily[2].temp.max, msg.payload.daily[1].temp.min),\n       cell09: formatTemp(msg.payload.daily[3].temp.max, msg.payload.daily[2].temp.min),\n       cell10: formatTemp(msg.payload.daily[4].temp.max, msg.payload.daily[3].temp.min),\n  \t}\n  },\n  rowicons: {\n  \tdata01: {\n  \t\tcell01: msg.payload.hourly[1].weather[0].icon,\n  \t\tcell02: msg.payload.hourly[2].weather[0].icon,\n  \t\tcell03: msg.payload.hourly[3].weather[0].icon,\n  \t\tcell04: msg.payload.hourly[4].weather[0].icon,\n  \t\tcell05: msg.payload.hourly[5].weather[0].icon,\n  \t\tcell06: msg.payload.hourly[6].weather[0].icon,\n  \t\tcell07: msg.payload.daily[1].weather[0].icon,\n  \t\tcell08: msg.payload.daily[2].weather[0].icon,\n  \t\tcell09: msg.payload.daily[3].weather[0].icon,\n  \t\tcell10: msg.payload.daily[4].weather[0].icon,\n  \t}\n  }\n}\n\nreturn fcdata;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 340,
        "wires": [
            [
                "2e7cdcd57d80ed35"
            ]
        ]
    },
    {
        "id": "183efff7df1e6ccd",
        "type": "ui_text",
        "z": "79824697764778fc",
        "group": "70fb931.dfc146c",
        "order": 3,
        "width": 2,
        "height": "1",
        "name": "Temperature",
        "label": "",
        "format": "<p style=\"font-size: 200%\">{{msg.payload.current.temp}}</p>",
        "layout": "row-left",
        "className": "",
        "x": 1310,
        "y": 120,
        "wires": []
    },
    {
        "id": "5e72502f5d3b9ee9",
        "type": "http request",
        "z": "79824697764778fc",
        "name": "Get OWM data",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "https://api.openweathermap.org/data/2.5/onecall",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 300,
        "wires": [
            [
                "95c63362f383af07",
                "81df6592ebe7e563",
                "fd157ac074bbeccd"
            ]
        ]
    },
    {
        "id": "95c63362f383af07",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Format current data",
        "func": "var icon = {};\n\nvar units = flow.get('units');\nif (units === undefined) {units = 'imperial';}\n\nfunction timeConvert(UNIX_timestamp){\n  var dateObject = new Date(UNIX_timestamp * 1000);\n  if (flow.get('hour12')) {  // 12 hour time format\n    return dateObject.toLocaleString('en', { timezone: msg.payload.timezone, hour12: true, hour: 'numeric', minute: '2-digit'}).toLowerCase();\n  } else {  // 24 hour time format\n    return dateObject.toLocaleString('en', { timezone: msg.payload.timezone, hour12: false, hour: 'numeric', minute: '2-digit'});\n  }      \n}\n\nvar degreesToCardinal = function(deg){\n  if (deg>11.25 && deg<=33.75){return \"NNE\";}\n  else if (deg>33.75 && deg<56.25){return \"NE\";}\n  else if (deg>56.25 && deg<78.75){return \"ENE\";}\n  else if (deg>78.75 && deg<101.25){return \"E\";}\n  else if (deg>101.25 && deg<123.75){return \"ESE\";}\n  else if (deg>123.75 && deg<146.25){return \"SE\";}\n  else if (deg>146.25 && deg<168.75){return \"SSE\";}\n  else if (deg>168.75 && deg<191.25){return \"S\";}\n  else if (deg>191.25 && deg<213.75){return \"SSW\";}\n  else if (deg>213.75 && deg<236.25){return \"SW\";}\n  else if (deg>236.25 && deg<258.75){return \"WSW\";}\n  else if (deg>258.75 && deg<281.25){return \"W\";}\n  else if (deg>281.25 && deg<303.75){return \"WNW\";}\n  else if (deg>303.75 && deg<326.25){return \"NW\";}\n  else if (deg>326.25 && deg<348.75){return \"NNW\";}\n  else {return \"N\";}\n}\n\nif (units == \"imperial\")\n{\n  msg.payload.current.temp = msg.payload.current.temp.toFixed() + ' °F';\n  msg.payload.current.wind_speed = msg.payload.current.wind_speed.toFixed() + ' mph';\n}\nelse  // metric units\n{\n  msg.payload.current.temp = msg.payload.current.temp.toFixed(1) + ' °C';\n  msg.payload.current.wind_speed = msg.payload.current.wind_speed.toFixed(1) + ' m/s';\n}\n\nmsg.payload.current.wind_cardinal = degreesToCardinal(msg.payload.current.wind_deg);\n\nmsg.payload.current.sunrise = timeConvert(msg.payload.current.sunrise);\nmsg.payload.current.sunset = timeConvert(msg.payload.current.sunset);\n\nvar iconString = 'wi-owm-' + msg.payload.current.weather[0].icon + ' wi-4x';\nicon = {\n    ui_control: {\n        icon: iconString\n    }\n}; \n\nreturn [msg, icon];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 180,
        "wires": [
            [
                "183efff7df1e6ccd",
                "96dab0dc6d336eb1",
                "3f76722049e20068",
                "6b68fd5f2e03dfb1",
                "d7b531d22f718c8b"
            ],
            [
                "ae7879d240e5165e"
            ]
        ]
    },
    {
        "id": "a02f974f21dd5c31",
        "type": "change",
        "z": "79824697764778fc",
        "name": "Settings",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.lat",
                "pt": "msg",
                "to": "lat",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload.lon",
                "pt": "msg",
                "to": "lon",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload.appid",
                "pt": "msg",
                "to": "0db6fa33838afa1241b6964f8cbd1935",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.units",
                "pt": "msg",
                "to": "metric",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.lang",
                "pt": "msg",
                "to": "en",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "hour24",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "units",
                "pt": "flow",
                "to": "payload.units",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "lang",
                "pt": "flow",
                "to": "payload.lang",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.exclude",
                "pt": "msg",
                "to": "minutely",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 300,
        "wires": [
            [
                "5e72502f5d3b9ee9"
            ]
        ]
    },
    {
        "id": "eaf37dd27fdb3be7",
        "type": "ui_ui_control",
        "z": "79824697764778fc",
        "name": "Update tab",
        "events": "all",
        "x": 170,
        "y": 420,
        "wires": [
            [
                "5b2ccf109b1cb6fe"
            ]
        ]
    },
    {
        "id": "ab028375cf339bd5",
        "type": "link out",
        "z": "79824697764778fc",
        "name": "Refresh",
        "mode": "link",
        "links": [
            "7f89e31146a7fb28"
        ],
        "x": 1435,
        "y": 280,
        "wires": []
    },
    {
        "id": "7f89e31146a7fb28",
        "type": "link in",
        "z": "79824697764778fc",
        "name": "",
        "links": [
            "ab028375cf339bd5",
            "921c73408006946c",
            "0a66e2246131cdcd"
        ],
        "x": 425,
        "y": 300,
        "wires": [
            [
                "a02f974f21dd5c31"
            ]
        ]
    },
    {
        "id": "5b2ccf109b1cb6fe",
        "type": "switch",
        "z": "79824697764778fc",
        "name": "Tab focus",
        "property": "tab",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 420,
        "wires": [
            [
                "a02f974f21dd5c31"
            ]
        ]
    },
    {
        "id": "237dafe68ffc957a",
        "type": "ui_button",
        "z": "79824697764778fc",
        "name": "",
        "group": "f2c9d6d8312163b5",
        "order": 4,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Start Watering",
        "tooltip": "",
        "color": "white",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Watering cycle started",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 600,
        "wires": [
            [
                "bfdc1b3e4c54edbb"
            ]
        ]
    },
    {
        "id": "8bedab3a7639343a",
        "type": "ui_text_input",
        "z": "79824697764778fc",
        "name": "",
        "label": "Set value",
        "tooltip": "",
        "group": "e1ed05e8d05a9e01",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 140,
        "y": 1040,
        "wires": [
            [
                "d3ccd19d83eecedb"
            ]
        ]
    },
    {
        "id": "4d7f4132729a894d",
        "type": "ui_gauge",
        "z": "79824697764778fc",
        "name": "",
        "group": "f2c9d6d8312163b5",
        "order": 9,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Current Soil Humidity",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "1000",
        "colors": [
            "#e01b24",
            "#e6e600",
            "#3584e4"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 580,
        "y": 1380,
        "wires": []
    },
    {
        "id": "6b47755cf482a983",
        "type": "ui_chart",
        "z": "79824697764778fc",
        "name": "",
        "group": "f2c9d6d8312163b5",
        "order": 11,
        "width": 0,
        "height": 0,
        "label": "Soil Humidity Log",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "No data",
        "dot": false,
        "ymin": "0",
        "ymax": "1000",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#986a44",
            "#335684",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 570,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "3978f36d7bb84a4a",
        "type": "ui_button",
        "z": "79824697764778fc",
        "name": "",
        "group": "e1ed05e8d05a9e01",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "OK",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "threshold",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 550,
        "y": 1040,
        "wires": [
            [
                "42f41308953886b0",
                "51cc6c16f81b1c4e"
            ]
        ]
    },
    {
        "id": "6f7adae6303dc334",
        "type": "ui_text",
        "z": "79824697764778fc",
        "group": "f2c9d6d8312163b5",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 530,
        "y": 1180,
        "wires": []
    },
    {
        "id": "e562d11d511945c9",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Status Receiver",
        "func": "status = flow.get(\"status\");\n\nswitch(status) {\n    case 0:\n        msg.payload = \"Idling - Auto\";\n        break;\n    case 1:\n        msg.payload = \"Watering - Auto\";\n        break;\n    case 2:\n        msg.payload = \"Idling - Manual\";\n        break;\n    case 3:\n        msg.payload = \"Watering - Manual\";\n        break;\n    default:\n        msg.payload = \"Undefined state!\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1180,
        "wires": [
            [
                "6f7adae6303dc334",
                "24a1b1dcbf442b83"
            ]
        ]
    },
    {
        "id": "c1217d5759a1fde7",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Send to flow",
        "func": "const lat = msg.payload.lat;\nconst lon = msg.payload.lon;\n\nflow.set(\"lat\",lat);\nflow.set(\"lon\",lon);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 200,
        "wires": [
            [
                "a02f974f21dd5c31"
            ]
        ]
    },
    {
        "id": "da9a8403733a49fe",
        "type": "ui_form",
        "z": "79824697764778fc",
        "name": "",
        "label": "Set location",
        "group": "70fb931.dfc146c",
        "order": 11,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Latitude",
                "value": "lat",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Longtitude",
                "value": "lon",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "lat": "",
            "lon": ""
        },
        "payload": "",
        "submit": "Submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "c1217d5759a1fde7",
                "48b6f2f2c3068a17",
                "066428c8a789cdb6"
            ]
        ]
    },
    {
        "id": "d3ccd19d83eecedb",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Set threshold",
        "func": "flow.set(\"threshold\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "231dee326de70fc6",
        "type": "ui_chart",
        "z": "79824697764778fc",
        "name": "",
        "group": "f2c9d6d8312163b5",
        "order": 13,
        "width": 0,
        "height": 0,
        "label": "Watering Log",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "No data",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#335684",
            "#335684",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 550,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "a780113d723e0123",
        "type": "comment",
        "z": "79824697764778fc",
        "name": "Visual",
        "info": "",
        "x": 130,
        "y": 1260,
        "wires": []
    },
    {
        "id": "64462e1cd2353c4e",
        "type": "comment",
        "z": "79824697764778fc",
        "name": "Watering Status",
        "info": "",
        "x": 160,
        "y": 1140,
        "wires": []
    },
    {
        "id": "e724577cd9f41e31",
        "type": "comment",
        "z": "79824697764778fc",
        "name": "Set Threshold",
        "info": "",
        "x": 150,
        "y": 1000,
        "wires": []
    },
    {
        "id": "bb27877c70401152",
        "type": "comment",
        "z": "79824697764778fc",
        "name": "Weather Forecast",
        "info": "",
        "x": 130,
        "y": 60,
        "wires": []
    },
    {
        "id": "8d81dc57216cb782",
        "type": "comment",
        "z": "79824697764778fc",
        "name": "Status Setters",
        "info": "",
        "x": 150,
        "y": 540,
        "wires": []
    },
    {
        "id": "42f41308953886b0",
        "type": "ui_text",
        "z": "79824697764778fc",
        "group": "e1ed05e8d05a9e01",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current value",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 760,
        "y": 1040,
        "wires": []
    },
    {
        "id": "3a5aae95dc320bcc",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Get Watering Status",
        "func": "msg.payload = flow.get(\"status\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1300,
        "wires": [
            [
                "231dee326de70fc6"
            ]
        ]
    },
    {
        "id": "8edb8d63be685cbb",
        "type": "link in",
        "z": "79824697764778fc",
        "name": "Status",
        "links": [
            "473d5847ee73694f"
        ],
        "x": 105,
        "y": 1300,
        "wires": [
            [
                "3a5aae95dc320bcc"
            ]
        ]
    },
    {
        "id": "48b6f2f2c3068a17",
        "type": "ui_text",
        "z": "79824697764778fc",
        "group": "70fb931.dfc146c",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current latitude",
        "format": "{{msg.payload.lat}}",
        "layout": "row-spread",
        "className": "",
        "x": 400,
        "y": 120,
        "wires": []
    },
    {
        "id": "066428c8a789cdb6",
        "type": "ui_text",
        "z": "79824697764778fc",
        "group": "70fb931.dfc146c",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current longtitude",
        "format": "{{msg.payload.lon}}",
        "layout": "row-spread",
        "className": "",
        "x": 410,
        "y": 160,
        "wires": []
    },
    {
        "id": "fd157ac074bbeccd",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Set forecast string",
        "func": "let forecast = \"\";\n\nif (flow.get(\"outdoor\") == 1) {\n    for (let i = 1; i <= 6; i++) {\n        if (msg.payload.hourly[i].weather[0].main == \"Rain\") {\n            forecast += \"1\";\n        } else {\n            forecast += \"0\";\n        }\n    }\n} else {\n    forecast = \"000000\"\n}\n\nflow.set(\"forecast\", forecast);\n\nmsg.payload.rain = forecast;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 420,
        "wires": [
            [
                "5d8b10d12295b7fa",
                "6a66f340f203b766"
            ]
        ]
    },
    {
        "id": "5226b59ed9d1df32",
        "type": "ui_switch",
        "z": "79824697764778fc",
        "name": "",
        "label": "Outdoor",
        "tooltip": "Turn on to switch to outdoor mode which take weather forecast into account",
        "group": "70fb931.dfc146c",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 660,
        "y": 160,
        "wires": [
            [
                "b90dfb5b98b3557e"
            ]
        ]
    },
    {
        "id": "b90dfb5b98b3557e",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Set mode",
        "func": "if (msg.payload == true) {\n    flow.set(\"outdoor\", 1);\n} else {\n    flow.set(\"outdoor\", 0);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 220,
        "wires": [
            [
                "921c73408006946c"
            ]
        ]
    },
    {
        "id": "5020c1ab312ab513",
        "type": "comment",
        "z": "79824697764778fc",
        "name": "README",
        "info": "If outdoor then weather forecast will be taking into account when deciding to activate watering system.\nElse forecast will be set to \"000000\".",
        "x": 660,
        "y": 120,
        "wires": []
    },
    {
        "id": "e01a819056ba2dca",
        "type": "switch",
        "z": "79824697764778fc",
        "name": "Set message",
        "property": "status",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 610,
        "y": 600,
        "wires": [
            [
                "910354e862c23ad2"
            ],
            [
                "fdebcb9f3cf12b49"
            ],
            [
                "0c1749f8464c065c"
            ],
            [
                "c4f38b87f6891a4d"
            ]
        ]
    },
    {
        "id": "e83829ef252f5225",
        "type": "ui_button",
        "z": "79824697764778fc",
        "name": "",
        "group": "f2c9d6d8312163b5",
        "order": 6,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Stop Watering",
        "tooltip": "",
        "color": "white",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Watering cycle stopped",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 680,
        "wires": [
            [
                "8c6a930b46373253"
            ]
        ]
    },
    {
        "id": "bd0f5b6e238d751c",
        "type": "ui_toast",
        "z": "79824697764778fc",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Notice",
        "x": 950,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "473d5847ee73694f",
        "type": "link out",
        "z": "79824697764778fc",
        "name": "Manual Trigger",
        "mode": "link",
        "links": [
            "ac099b9c6c8d62cf",
            "ed7699d3f939c172",
            "8edb8d63be685cbb"
        ],
        "x": 555,
        "y": 760,
        "wires": []
    },
    {
        "id": "f41a85e111006740",
        "type": "comment",
        "z": "79824697764778fc",
        "name": "ESP32",
        "info": "",
        "x": 130,
        "y": 1580,
        "wires": []
    },
    {
        "id": "eb536bbddeebbf31",
        "type": "comment",
        "z": "79824697764778fc",
        "name": "Receive incoming requests",
        "info": "",
        "x": 190,
        "y": 1640,
        "wires": []
    },
    {
        "id": "4082f1b4641ab5ef",
        "type": "comment",
        "z": "79824697764778fc",
        "name": "Send data to ESP",
        "info": "",
        "x": 170,
        "y": 1740,
        "wires": []
    },
    {
        "id": "6e04bfab72b90b74",
        "type": "inject",
        "z": "79824697764778fc",
        "name": "Receiving",
        "props": [
            {
                "p": "payload.data",
                "v": "006270500",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "x": 140,
        "y": 1680,
        "wires": [
            [
                "30bec41e73322fa2"
            ]
        ]
    },
    {
        "id": "66f9d6b2d587d89e",
        "type": "inject",
        "z": "79824697764778fc",
        "name": "Sending",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1820,
        "wires": [
            [
                "1eb8f8ae2f3ce884"
            ]
        ]
    },
    {
        "id": "3d50e9ace742e215",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Sender",
        "func": "msg.payload = flow.get(\"send\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1780,
        "wires": [
            [
                "c4c0731995b92983"
            ]
        ]
    },
    {
        "id": "1189602106b590c0",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Receiver",
        "func": "// Format: [Status:1][Moisture:4][Threshold:4]\n\nflow.set(\"receive\", msg.payload.data);\n\nmsg.payload = msg.payload.data;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1680,
        "wires": [
            [
                "9c07a3ba5bbae18b",
                "a4f65f9479dd05a9"
            ]
        ]
    },
    {
        "id": "6368a4f714d66909",
        "type": "debug",
        "z": "79824697764778fc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1820,
        "wires": []
    },
    {
        "id": "688c0c8c62f651ea",
        "type": "debug",
        "z": "79824697764778fc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1700,
        "wires": []
    },
    {
        "id": "c4c0731995b92983",
        "type": "http response",
        "z": "79824697764778fc",
        "d": true,
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1200,
        "y": 1780,
        "wires": []
    },
    {
        "id": "9c07a3ba5bbae18b",
        "type": "http response",
        "z": "79824697764778fc",
        "d": true,
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 800,
        "y": 1640,
        "wires": []
    },
    {
        "id": "1eb8f8ae2f3ce884",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Data Encoder",
        "func": "// Format: [Year:2][Month:2][Day:2][Hour:2][Min:2][Sec:2][Status:1][Moisture:4][Threshold:4][Forecast:6]   \n\nconst isoStr = new Date().toLocaleString('en-GB', { timeZone: 'Asia/Singapore' });\n\nlet encoded = \"\";\n\nlet time = isoStr[8] + isoStr[9] +      // year\n            isoStr[3] + isoStr[4] +     // month\n            isoStr[0] + isoStr[1] +     // day\n            isoStr[12] + isoStr[13] +   // hour\n            isoStr[15] + isoStr[16] +   // min\n            isoStr[18] + isoStr[19];    // sec\n\nlet status = flow.get(\"status\");\n\nlet moistVal = flow.get(\"moisture\");\nlet moist = \"\";\nif (moistVal < 1000) {\n    moist += 0;\n    if (moistVal < 100) {\n        moist += 0;\n        if (moistVal < 10) {\n            moist += 0;\n        }\n    }\n}\nmoist += moistVal;\n\nlet thresVal = flow.get(\"threshold\");\nlet threshold = \"\";\nif (thresVal < 1000) {\n    threshold += 0;\n    if (thresVal < 100) {\n        threshold += 0;\n        if (thresVal < 10) {\n            threshold += 0;\n        }\n    }\n}\nthreshold += thresVal;\n\nlet forecast = flow.get(\"forecast\");\n\nlet message = time + status + moist + threshold + forecast;\n\nflow.set(\"send\", message);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1780,
        "wires": [
            [
                "f3d8e345b3282fc4"
            ]
        ]
    },
    {
        "id": "bd07ee6aa9f3e375",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Get moisture value",
        "func": "msg.payload = flow.get(\"moisture\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1380,
        "wires": [
            [
                "4d7f4132729a894d",
                "6b47755cf482a983"
            ]
        ]
    },
    {
        "id": "a4f65f9479dd05a9",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Data Decoder",
        "func": "data = flow.get(\"receive\");\n\nflow.set(\"status\", parseInt(data[0]));\n\nlet moist = \"\";\nfor (let i = 1; i < (1 + 4); i++) {\n    moist += data[i];\n}\nflow.set(\"moisture\", parseInt(moist));\n\nlet threshold = \"\";\nfor (let i = 5; i < (4 + 4); i++) {\n    threshold += data[i];\n}\nflow.set(\"threshold\", parseInt(threshold));\n\nmsg.payload = data;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1700,
        "wires": [
            [
                "688c0c8c62f651ea",
                "0a66e2246131cdcd"
            ]
        ]
    },
    {
        "id": "0a66e2246131cdcd",
        "type": "link out",
        "z": "79824697764778fc",
        "name": "http",
        "mode": "link",
        "links": [
            "a963e25d5e12195d",
            "ed7699d3f939c172",
            "c8270456e0080dd9",
            "7f89e31146a7fb28"
        ],
        "x": 955,
        "y": 1740,
        "wires": []
    },
    {
        "id": "a963e25d5e12195d",
        "type": "link in",
        "z": "79824697764778fc",
        "name": "",
        "links": [
            "0a66e2246131cdcd"
        ],
        "x": 105,
        "y": 1380,
        "wires": [
            [
                "bd07ee6aa9f3e375"
            ]
        ]
    },
    {
        "id": "ed7699d3f939c172",
        "type": "link in",
        "z": "79824697764778fc",
        "name": "",
        "links": [
            "0a66e2246131cdcd",
            "473d5847ee73694f"
        ],
        "x": 95,
        "y": 1180,
        "wires": [
            [
                "e562d11d511945c9"
            ]
        ]
    },
    {
        "id": "5d8b10d12295b7fa",
        "type": "debug",
        "z": "79824697764778fc",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.rain",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 440,
        "wires": []
    },
    {
        "id": "e2ec3aacd1927e5a",
        "type": "inject",
        "z": "79824697764778fc",
        "name": "Default values",
        "props": [
            {
                "p": "payload.lat",
                "v": "10.8",
                "vt": "num"
            },
            {
                "p": "payload.lon",
                "v": "106.7",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "x": 160,
        "y": 260,
        "wires": [
            [
                "c1217d5759a1fde7"
            ]
        ]
    },
    {
        "id": "24a1b1dcbf442b83",
        "type": "link out",
        "z": "79824697764778fc",
        "name": "Update Status",
        "mode": "link",
        "links": [
            "838ea7a234e10a22"
        ],
        "x": 495,
        "y": 1220,
        "wires": []
    },
    {
        "id": "838ea7a234e10a22",
        "type": "link in",
        "z": "79824697764778fc",
        "name": "",
        "links": [
            "24a1b1dcbf442b83",
            "6a66f340f203b766",
            "51cc6c16f81b1c4e"
        ],
        "x": 185,
        "y": 1780,
        "wires": [
            [
                "1eb8f8ae2f3ce884"
            ]
        ]
    },
    {
        "id": "51cc6c16f81b1c4e",
        "type": "link out",
        "z": "79824697764778fc",
        "name": "Update Threshold",
        "mode": "link",
        "links": [
            "838ea7a234e10a22"
        ],
        "x": 695,
        "y": 1080,
        "wires": []
    },
    {
        "id": "6a66f340f203b766",
        "type": "link out",
        "z": "79824697764778fc",
        "name": "Update Weather",
        "mode": "link",
        "links": [
            "838ea7a234e10a22"
        ],
        "x": 1195,
        "y": 480,
        "wires": []
    },
    {
        "id": "1c644bd25f687d1b",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Formatter",
        "func": "let raw = flow.get(\"send\");\nlet fmt = \"\";\n\nfmt += \"Year: \" + raw[0] + raw[1] + \" || \";\nfmt += \"Month: \" + raw[2] + raw[3] + \" || \";\nfmt += \"Day: \" + raw[4] + raw[5] + \" || \";\nfmt += \"Hour: \" + raw[6] + raw[7] + \" || \";\nfmt += \"Minute: \" + raw[8] + raw[9] + \" || \";\nfmt += \"Second: \" + raw[10] + raw[11] + \" || \";\nfmt += \"Status: \" + raw[12] + \" || \";\nfmt += \"Moisture: \" + raw[13] + raw[14] + raw[15] + raw[16] + \" || \";\nfmt += \"Threshold: \" + raw[17] + raw[18] + raw[19] + raw[20] + \" || \";\nfmt += \"Forecast: \" + raw[21] + raw[22] + raw[23] + raw[24] + raw[25] + raw[26];\n\nmsg.payload = raw + \" || \" + fmt;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1820,
        "wires": [
            [
                "6368a4f714d66909"
            ]
        ]
    },
    {
        "id": "921c73408006946c",
        "type": "link out",
        "z": "79824697764778fc",
        "name": "Update Mode",
        "mode": "link",
        "links": [
            "7f89e31146a7fb28"
        ],
        "x": 775,
        "y": 220,
        "wires": []
    },
    {
        "id": "48a37d34e375f727",
        "type": "rbe",
        "z": "79824697764778fc",
        "name": "Prevent Duplication",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 790,
        "y": 1780,
        "wires": [
            [
                "3d50e9ace742e215",
                "1c644bd25f687d1b"
            ]
        ]
    },
    {
        "id": "30bec41e73322fa2",
        "type": "rbe",
        "z": "79824697764778fc",
        "name": "Prevent Duplication",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 370,
        "y": 1680,
        "wires": [
            [
                "1189602106b590c0"
            ]
        ]
    },
    {
        "id": "f3d8e345b3282fc4",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Exclude Timestamp",
        "func": "msg.payload = flow.get(\"send\").slice(12);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1780,
        "wires": [
            [
                "48a37d34e375f727"
            ]
        ]
    },
    {
        "id": "edad4fc4a8f7de6f",
        "type": "comment",
        "z": "79824697764778fc",
        "name": "About http message format...",
        "info": "Note: [{Name-of-property}:{Number-of-character}]\n\nThe string receive from ESP (composed by Arduino) will follow the format:\n[Status:1][Moisture:4][Threshold:4]\n\nThe string to be sent to ESP and to save on cloud service:\n[Year:2][Month:2][Day:2][Hour:2][Min:2][Sec:2][Status:1][Moisture:4][Threshold:4][Forecast:6]",
        "x": 320,
        "y": 1580,
        "wires": []
    },
    {
        "id": "80536041e3c2c72b",
        "type": "ui_button",
        "z": "79824697764778fc",
        "name": "",
        "group": "f2c9d6d8312163b5",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Auto Watering",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "The watering cycle is used manually",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 760,
        "wires": [
            [
                "6970c462caf93d5a"
            ]
        ]
    },
    {
        "id": "0c1749f8464c065c",
        "type": "function",
        "z": "79824697764778fc",
        "name": "M - I",
        "func": "msg.payload = \"Switched to manual. Currently idling.\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 620,
        "wires": [
            [
                "bd0f5b6e238d751c"
            ]
        ]
    },
    {
        "id": "c4f38b87f6891a4d",
        "type": "function",
        "z": "79824697764778fc",
        "name": "M - W",
        "func": "msg.payload = \"Switched to manual. Currently  watering.\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 660,
        "wires": [
            [
                "bd0f5b6e238d751c"
            ]
        ]
    },
    {
        "id": "bfdc1b3e4c54edbb",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Set flow.status",
        "func": "flow.set(\"status\", 3);\n\nmsg.payload = flow.get(\"status\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 600,
        "wires": [
            [
                "e01a819056ba2dca",
                "473d5847ee73694f"
            ]
        ]
    },
    {
        "id": "8c6a930b46373253",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Set flow.status",
        "func": "flow.set(\"status\", 2);\n\nmsg.payload = flow.get(\"status\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 680,
        "wires": [
            [
                "e01a819056ba2dca",
                "473d5847ee73694f"
            ]
        ]
    },
    {
        "id": "6970c462caf93d5a",
        "type": "function",
        "z": "79824697764778fc",
        "name": "Set flow.status",
        "func": "current = flow.get(\"status\");\n\nif (current == 0 || current == 2) {\n    flow.set(\"status\", 0);\n}\n\nelse {\n    flow.set(\"status\", 1);\n}\n\nmsg.payload = flow.get(\"status\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 760,
        "wires": [
            [
                "e01a819056ba2dca",
                "473d5847ee73694f"
            ]
        ]
    },
    {
        "id": "910354e862c23ad2",
        "type": "function",
        "z": "79824697764778fc",
        "name": "A - I",
        "func": "msg.payload = \"Switched to auto. Currently idling.\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 540,
        "wires": [
            [
                "bd0f5b6e238d751c"
            ]
        ]
    },
    {
        "id": "fdebcb9f3cf12b49",
        "type": "function",
        "z": "79824697764778fc",
        "name": "A - W",
        "func": "msg.payload = \"Switched to auto. Currently watering.\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 580,
        "wires": [
            [
                "bd0f5b6e238d751c"
            ]
        ]
    },
    {
        "id": "70fb931.dfc146c",
        "type": "ui_group",
        "name": "Weather",
        "tab": "4bb34f67.69a87",
        "order": 4,
        "disp": false,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f2c9d6d8312163b5",
        "type": "ui_group",
        "name": "Data",
        "tab": "4bb34f67.69a87",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e1ed05e8d05a9e01",
        "type": "ui_group",
        "name": "Humidity Threshold",
        "tab": "4bb34f67.69a87",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4bb34f67.69a87",
        "type": "ui_tab",
        "name": "CapstoneProject",
        "icon": "fa-thermometer-half",
        "order": 3,
        "disabled": false,
        "hidden": false
    }
]
