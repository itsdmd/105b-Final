[
    {
        "id": "da1e5a53b04b1d78",
        "type": "tab",
        "label": "CS105b Final",
        "disabled": false,
        "info": ""
    },
    {
        "id": "0118c5bf23faa103",
        "type": "ui_button",
        "z": "da1e5a53b04b1d78",
        "name": "IconRefresh",
        "group": "70fb931.dfc146c",
        "order": 2,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "Refresh",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-refresh 4x",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "topicType": "str",
        "x": 1310,
        "y": 280,
        "wires": [
            [
                "5650d1680d259116"
            ]
        ]
    },
    {
        "id": "358aaf3d94a2e384",
        "type": "ui_text",
        "z": "da1e5a53b04b1d78",
        "group": "70fb931.dfc146c",
        "order": 6,
        "width": 5,
        "height": "1",
        "name": "Description",
        "label": "",
        "format": "{{msg.payload.current.weather[0].description}}",
        "layout": "row-left",
        "className": "",
        "x": 1310,
        "y": 80,
        "wires": []
    },
    {
        "id": "be7351e1dd02ac9c",
        "type": "ui_text",
        "z": "da1e5a53b04b1d78",
        "group": "70fb931.dfc146c",
        "order": 4,
        "width": 3,
        "height": "1",
        "name": "Wind",
        "label": "",
        "format": "{{msg.payload.current.wind_speed}}&nbsp;&nbsp;<i class=\"wi wi-darksky-wind\"></i>&nbsp;&nbsp;{{msg.payload.current.wind_cardinal}}",
        "layout": "col-center",
        "className": "",
        "x": 1290,
        "y": 160,
        "wires": []
    },
    {
        "id": "1aac7190b8b04cfe",
        "type": "ui_text",
        "z": "da1e5a53b04b1d78",
        "group": "70fb931.dfc146c",
        "order": 5,
        "width": 3,
        "height": 1,
        "name": "SunriseTime",
        "label": "",
        "format": "<i class=\"wi wi-owm-01d\"></i>&nbsp;<i class=\"fa fa-arrow-up\"></i>&nbsp;&nbsp;{{msg.payload.current.sunrise}}",
        "layout": "row-center",
        "className": "",
        "x": 1310,
        "y": 200,
        "wires": []
    },
    {
        "id": "0ff51096c64a0e3a",
        "type": "ui_text",
        "z": "da1e5a53b04b1d78",
        "group": "70fb931.dfc146c",
        "order": 7,
        "width": 3,
        "height": 1,
        "name": "SunsetTime",
        "label": "",
        "format": "<i class=\"wi wi-wu-sunny\"></i>&nbsp;<i class=\"fa fa-arrow-down\"></i>&nbsp;&nbsp;{{msg.payload.current.sunset}}",
        "layout": "row-center",
        "className": "",
        "x": 1310,
        "y": 240,
        "wires": []
    },
    {
        "id": "295b98011064ab87",
        "type": "ui_template",
        "z": "da1e5a53b04b1d78",
        "group": "70fb931.dfc146c",
        "name": "Forecast Info",
        "order": 8,
        "width": "10",
        "height": "2",
        "format": "<div style=\"height: 100%; justify-content: center; align-items: center;\">\n <div layout=\"rowicons\" layout-align=\"space-around start\" ng-repeat=\"data in msg.payload.rowicons\" style=\"font-size:150%;padding-top: 5px;padding-bottom: 5px\">\n  <span flex style=\"color: black;text-align: center\"><i class=\"wi wi-owm-{{data.cell01}}\"></i></span>\n  <span flex style=\"color: black;text-align: center\"><i class=\"wi wi-owm-{{data.cell02}}\"></i></span>\n  <span flex style=\"color: black;text-align: center\"><i class=\"wi wi-owm-{{data.cell03}}\"></i></span>\n  <span flex style=\"color: black;text-align: center\"><i class=\"wi wi-owm-{{data.cell04}}\"></i></span>\n  <span flex style=\"color: black;text-align: center\"><i class=\"wi wi-owm-{{data.cell05}}\"></i></span>\n  <span flex style=\"color: black;text-align: center\"><i class=\"wi wi-owm-{{data.cell06}}\"></i></span>\n  <span flex style=\"color: #097479;text-align: center\"><i class=\"wi wi-owm-{{data.cell07}}\"></i></span>\n  <span flex style=\"color: #097479;text-align: center\"><i class=\"wi wi-owm-{{data.cell08}}\"></i></span>\n  <span flex style=\"color: #097479;text-align: center\"><i class=\"wi wi-owm-{{data.cell09}}\"></i></span>\n  <span flex style=\"color: #097479;text-align: center\"><i class=\"wi wi-owm-{{data.cell10}}\"></i></span>\n </div>\n <div layout=\"rowtext\" layout-align=\"space-around start\" ng-repeat=\"data in msg.payload.rowtext\" style=\"line-height: 150%\">\n  <span flex style=\"color: black;text-align: center;\">{{data.cell01}}</span>\n  <span flex style=\"color: black;text-align: center\">{{data.cell02}}</span>\n  <span flex style=\"color: black;text-align: center\">{{data.cell03}}</span>\n  <span flex style=\"color: black;text-align: center\">{{data.cell04}}</span>\n  <span flex style=\"color: black;text-align: center\">{{data.cell05}}</span>\n  <span flex style=\"color: black;text-align: center\">{{data.cell06}}</span>\n  <span flex style=\"color: #097479;text-align: center\">{{data.cell07}}</span>\n  <span flex style=\"color: #097479;text-align: center\">{{data.cell08}}</span>\n  <span flex style=\"color: #097479;text-align: center\">{{data.cell09}}</span>\n  <span flex style=\"color: #097479;text-align: center\">{{data.cell10}}</span>\n </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1310,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "af226991fd2ce75c",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Format forecast data",
        "func": "var fcdata = {};\nvar units=flow.get('units');\nif (units===undefined)\n{\n  units=\"imperial\";\n}\n\nfunction formatTemp(high, low){\n    if (units == \"imperial\") {\n        if (low){\n          temp = parseFloat(high).toFixed() + '/' + parseFloat(low).toFixed()\n        }\n        else {\n          temp = parseFloat(high).toFixed() + '°F'\n        }\n    }\n    else { // metric\n        if (low){\n          temp = parseFloat(high).toFixed() + '/' + parseFloat(low).toFixed()\n        }\n        else {\n          temp = parseFloat(high).toFixed() + '°C'\n        }\n    }\n    return temp;\n}\n\nfunction dayName(unixTime){\n  var dateObject = new Date(unixTime * 1000);\n  return dateObject.toLocaleString(flow.get('lang'), { timezone: msg.payload.timezone, weekday: 'short'});\n  // If the line above is not producing the correct short weekday names for the language set by 'lang',\n  //   you can try upgrading to NodeJS version 13 or higher (when full international support was added for the toLocaleString function),\n  //   or you can use the code below which is an example for French short weekday names.\n/*  \n  switch (dateObject.toLocaleString('en', { timezone: msg.payload.timezone, weekday: 'short'})) {\n    case 'Mon':\n      return 'Lun';\n    case 'Tue':\n      return 'Mar';\n    case 'Wed':\n      return 'Mer';\n    case 'Thu':\n      return 'Jeu';\n    case 'Fri':\n      return 'Ven';\n    case 'Sat':\n      return 'Sam';\n    case 'Sun':\n      return 'Dim';\n  }\n*/\n}\n\nfunction timeConvert(UNIX_timestamp){\n  var dateObject = new Date(UNIX_timestamp * 1000);\n  if (flow.get('hour12')) {  // 12 hour time format\n    return dateObject.toLocaleString('en', { timezone: msg.payload.timezone, hour12: true, hour: 'numeric'}).toLowerCase();\n  } else {  // 24 hour time format\n    return dateObject.toLocaleString('en', { timezone: msg.payload.timezone, hour12: false, hour: 'numeric'}) + ':00';\n  }      \n}\n\n// prepare forecast data for CSS based ui widget\nfcdata.payload = {\n  rowtext: {\n  \tdata01: {\n      cell01: timeConvert(msg.payload.hourly[1].dt),\n      cell02: timeConvert(msg.payload.hourly[2].dt),\n      cell03: timeConvert(msg.payload.hourly[3].dt),\n      cell04: timeConvert(msg.payload.hourly[4].dt),\n      cell05: timeConvert(msg.payload.hourly[5].dt),\n      cell06: timeConvert(msg.payload.hourly[6].dt),\n      cell07: dayName(msg.payload.daily[1].dt),\n      cell08: dayName(msg.payload.daily[2].dt),\n      cell09: dayName(msg.payload.daily[3].dt),\n      cell10: dayName(msg.payload.daily[4].dt),\n  \t},\n  \tdata02: {\n       cell01: formatTemp(msg.payload.hourly[1].temp),\n       cell02: formatTemp(msg.payload.hourly[2].temp),\n       cell03: formatTemp(msg.payload.hourly[3].temp),\n       cell04: formatTemp(msg.payload.hourly[4].temp),\n       cell05: formatTemp(msg.payload.hourly[5].temp),\n       cell06: formatTemp(msg.payload.hourly[6].temp),\n       cell07: formatTemp(msg.payload.daily[1].temp.max, msg.payload.daily[0].temp.min),\n       cell08: formatTemp(msg.payload.daily[2].temp.max, msg.payload.daily[1].temp.min),\n       cell09: formatTemp(msg.payload.daily[3].temp.max, msg.payload.daily[2].temp.min),\n       cell10: formatTemp(msg.payload.daily[4].temp.max, msg.payload.daily[3].temp.min),\n  \t}\n  },\n  rowicons: {\n  \tdata01: {\n  \t\tcell01: msg.payload.hourly[1].weather[0].icon,\n  \t\tcell02: msg.payload.hourly[2].weather[0].icon,\n  \t\tcell03: msg.payload.hourly[3].weather[0].icon,\n  \t\tcell04: msg.payload.hourly[4].weather[0].icon,\n  \t\tcell05: msg.payload.hourly[5].weather[0].icon,\n  \t\tcell06: msg.payload.hourly[6].weather[0].icon,\n  \t\tcell07: msg.payload.daily[1].weather[0].icon,\n  \t\tcell08: msg.payload.daily[2].weather[0].icon,\n  \t\tcell09: msg.payload.daily[3].weather[0].icon,\n  \t\tcell10: msg.payload.daily[4].weather[0].icon,\n  \t}\n  }\n}\n\nreturn fcdata;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 340,
        "wires": [
            [
                "295b98011064ab87"
            ]
        ]
    },
    {
        "id": "b0ee7e02fac70e8a",
        "type": "ui_text",
        "z": "da1e5a53b04b1d78",
        "group": "70fb931.dfc146c",
        "order": 3,
        "width": 2,
        "height": "1",
        "name": "Temperature",
        "label": "",
        "format": "<p style=\"font-size: 200%\">{{msg.payload.current.temp}}</p>",
        "layout": "row-left",
        "className": "",
        "x": 1310,
        "y": 120,
        "wires": []
    },
    {
        "id": "e1178f4b5798dcb3",
        "type": "http request",
        "z": "da1e5a53b04b1d78",
        "name": "Get OWM data",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "https://api.openweathermap.org/data/2.5/onecall",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 300,
        "wires": [
            [
                "6eeb9dfd4fca1478",
                "af226991fd2ce75c",
                "b6b150ace5f7030d"
            ]
        ]
    },
    {
        "id": "6eeb9dfd4fca1478",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Format current data",
        "func": "var icon = {};\n\nvar units = flow.get('units');\nif (units === undefined) {units = 'imperial';}\n\nfunction timeConvert(UNIX_timestamp){\n  var dateObject = new Date(UNIX_timestamp * 1000);\n  if (flow.get('hour12')) {  // 12 hour time format\n    return dateObject.toLocaleString('en', { timezone: msg.payload.timezone, hour12: true, hour: 'numeric', minute: '2-digit'}).toLowerCase();\n  } else {  // 24 hour time format\n    return dateObject.toLocaleString('en', { timezone: msg.payload.timezone, hour12: false, hour: 'numeric', minute: '2-digit'});\n  }      \n}\n\nvar degreesToCardinal = function(deg){\n  if (deg>11.25 && deg<=33.75){return \"NNE\";}\n  else if (deg>33.75 && deg<56.25){return \"NE\";}\n  else if (deg>56.25 && deg<78.75){return \"ENE\";}\n  else if (deg>78.75 && deg<101.25){return \"E\";}\n  else if (deg>101.25 && deg<123.75){return \"ESE\";}\n  else if (deg>123.75 && deg<146.25){return \"SE\";}\n  else if (deg>146.25 && deg<168.75){return \"SSE\";}\n  else if (deg>168.75 && deg<191.25){return \"S\";}\n  else if (deg>191.25 && deg<213.75){return \"SSW\";}\n  else if (deg>213.75 && deg<236.25){return \"SW\";}\n  else if (deg>236.25 && deg<258.75){return \"WSW\";}\n  else if (deg>258.75 && deg<281.25){return \"W\";}\n  else if (deg>281.25 && deg<303.75){return \"WNW\";}\n  else if (deg>303.75 && deg<326.25){return \"NW\";}\n  else if (deg>326.25 && deg<348.75){return \"NNW\";}\n  else {return \"N\";}\n}\n\nif (units == \"imperial\")\n{\n  msg.payload.current.temp = msg.payload.current.temp.toFixed() + ' °F';\n  msg.payload.current.wind_speed = msg.payload.current.wind_speed.toFixed() + ' mph';\n}\nelse  // metric units\n{\n  msg.payload.current.temp = msg.payload.current.temp.toFixed(1) + ' °C';\n  msg.payload.current.wind_speed = msg.payload.current.wind_speed.toFixed(1) + ' m/s';\n}\n\nmsg.payload.current.wind_cardinal = degreesToCardinal(msg.payload.current.wind_deg);\n\nmsg.payload.current.sunrise = timeConvert(msg.payload.current.sunrise);\nmsg.payload.current.sunset = timeConvert(msg.payload.current.sunset);\n\nvar iconString = 'wi-owm-' + msg.payload.current.weather[0].icon + ' wi-4x';\nicon = {\n    ui_control: {\n        icon: iconString\n    }\n}; \n\nreturn [msg, icon];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 180,
        "wires": [
            [
                "b0ee7e02fac70e8a",
                "be7351e1dd02ac9c",
                "358aaf3d94a2e384",
                "1aac7190b8b04cfe",
                "0ff51096c64a0e3a"
            ],
            [
                "0118c5bf23faa103"
            ]
        ]
    },
    {
        "id": "d5cadd13fcc4a795",
        "type": "change",
        "z": "da1e5a53b04b1d78",
        "name": "Settings",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.lat",
                "pt": "msg",
                "to": "lat",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload.lon",
                "pt": "msg",
                "to": "lon",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload.appid",
                "pt": "msg",
                "to": "0db6fa33838afa1241b6964f8cbd1935",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.units",
                "pt": "msg",
                "to": "metric",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.lang",
                "pt": "msg",
                "to": "en",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "hour24",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "units",
                "pt": "flow",
                "to": "payload.units",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "lang",
                "pt": "flow",
                "to": "payload.lang",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.exclude",
                "pt": "msg",
                "to": "minutely",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 300,
        "wires": [
            [
                "e1178f4b5798dcb3"
            ]
        ]
    },
    {
        "id": "ee91c11c148475cc",
        "type": "ui_ui_control",
        "z": "da1e5a53b04b1d78",
        "name": "Update tab",
        "events": "all",
        "x": 170,
        "y": 420,
        "wires": [
            [
                "f6bac1431837dde8"
            ]
        ]
    },
    {
        "id": "5650d1680d259116",
        "type": "link out",
        "z": "da1e5a53b04b1d78",
        "name": "Refresh",
        "mode": "link",
        "links": [
            "fb1c019a15b2c764"
        ],
        "x": 1435,
        "y": 280,
        "wires": []
    },
    {
        "id": "fb1c019a15b2c764",
        "type": "link in",
        "z": "da1e5a53b04b1d78",
        "name": "",
        "links": [
            "5650d1680d259116",
            "9cb35331ca9cbc0c",
            "aa3b7c38995505cf"
        ],
        "x": 425,
        "y": 300,
        "wires": [
            [
                "d5cadd13fcc4a795"
            ]
        ]
    },
    {
        "id": "f6bac1431837dde8",
        "type": "switch",
        "z": "da1e5a53b04b1d78",
        "name": "Tab focus",
        "property": "tab",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 420,
        "wires": [
            [
                "d5cadd13fcc4a795"
            ]
        ]
    },
    {
        "id": "162150879bfa50d2",
        "type": "ui_button",
        "z": "da1e5a53b04b1d78",
        "name": "",
        "group": "f2c9d6d8312163b5",
        "order": 2,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Start Watering",
        "tooltip": "",
        "color": "white",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Watering cycle started",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 640,
        "wires": [
            [
                "3ea792554450e098"
            ]
        ]
    },
    {
        "id": "9646895f0a9eb9c3",
        "type": "ui_text_input",
        "z": "da1e5a53b04b1d78",
        "name": "",
        "label": "Set value",
        "tooltip": "",
        "group": "e1ed05e8d05a9e01",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 140,
        "y": 820,
        "wires": [
            [
                "c35d734b8c500646"
            ]
        ]
    },
    {
        "id": "0dd3f3c51bb74ce0",
        "type": "ui_gauge",
        "z": "da1e5a53b04b1d78",
        "name": "",
        "group": "f2c9d6d8312163b5",
        "order": 4,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Current Soil Humidity",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "1000",
        "colors": [
            "#e01b24",
            "#e6e600",
            "#3584e4"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 580,
        "y": 1280,
        "wires": []
    },
    {
        "id": "8e8edaf996cecc25",
        "type": "ui_chart",
        "z": "da1e5a53b04b1d78",
        "name": "",
        "group": "f2c9d6d8312163b5",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "Soil Humidity Log",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "No data",
        "dot": false,
        "ymin": "0",
        "ymax": "1000",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#986a44",
            "#335684",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 570,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "08d1a863f1eb7b06",
        "type": "ui_button",
        "z": "da1e5a53b04b1d78",
        "name": "",
        "group": "e1ed05e8d05a9e01",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "OK",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "threshold",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 550,
        "y": 820,
        "wires": [
            [
                "1b965fa0736ed4bc",
                "fac23bff5084166b"
            ]
        ]
    },
    {
        "id": "669101457d527fd1",
        "type": "ui_text",
        "z": "da1e5a53b04b1d78",
        "group": "f2c9d6d8312163b5",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 470,
        "y": 960,
        "wires": []
    },
    {
        "id": "2b7e47fc9fcd47f2",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Status Receiver",
        "func": "status = flow.get(\"status\");\n\nif(status == 1) {\n  msg.payload = \"Watering\";\n} else {\n  msg.payload = \"Idling\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 960,
        "wires": [
            [
                "669101457d527fd1",
                "210129f7c6f3d3c9"
            ]
        ]
    },
    {
        "id": "45dcee17b0912e43",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Send to flow",
        "func": "const lat = msg.payload.lat;\nconst lon = msg.payload.lon;\n\nflow.set(\"lat\",lat);\nflow.set(\"lon\",lon);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 200,
        "wires": [
            [
                "d5cadd13fcc4a795"
            ]
        ]
    },
    {
        "id": "ec4046afab116c6a",
        "type": "ui_form",
        "z": "da1e5a53b04b1d78",
        "name": "",
        "label": "Set location",
        "group": "70fb931.dfc146c",
        "order": 11,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Latitude",
                "value": "lat",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Longtitude",
                "value": "lon",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "lat": "",
            "lon": ""
        },
        "payload": "",
        "submit": "Submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "45dcee17b0912e43",
                "1b0f87bcf57538b4",
                "02693e82a6b73510"
            ]
        ]
    },
    {
        "id": "c35d734b8c500646",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Set threshold",
        "func": "flow.set(\"threshold\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "50907519ece9b529",
        "type": "ui_chart",
        "z": "da1e5a53b04b1d78",
        "name": "",
        "group": "f2c9d6d8312163b5",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "Watering Log",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "No data",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#335684",
            "#335684",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 550,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "3b2f76999fbada0f",
        "type": "comment",
        "z": "da1e5a53b04b1d78",
        "name": "Visual",
        "info": "",
        "x": 130,
        "y": 1160,
        "wires": []
    },
    {
        "id": "e61d7d61462746df",
        "type": "comment",
        "z": "da1e5a53b04b1d78",
        "name": "Watering Status",
        "info": "",
        "x": 160,
        "y": 920,
        "wires": []
    },
    {
        "id": "5bb02bab792f5fa1",
        "type": "comment",
        "z": "da1e5a53b04b1d78",
        "name": "Set Threshold",
        "info": "",
        "x": 150,
        "y": 780,
        "wires": []
    },
    {
        "id": "8bb3209ef0b97655",
        "type": "comment",
        "z": "da1e5a53b04b1d78",
        "name": "Weather Forecast",
        "info": "",
        "x": 130,
        "y": 60,
        "wires": []
    },
    {
        "id": "99c5da97f63e267a",
        "type": "comment",
        "z": "da1e5a53b04b1d78",
        "name": "Manual Trigger",
        "info": "",
        "x": 160,
        "y": 600,
        "wires": []
    },
    {
        "id": "1b965fa0736ed4bc",
        "type": "ui_text",
        "z": "da1e5a53b04b1d78",
        "group": "e1ed05e8d05a9e01",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current value",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 760,
        "y": 820,
        "wires": []
    },
    {
        "id": "8f246491eec01e12",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Get Watering Status",
        "func": "msg.payload = flow.get(\"status\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1200,
        "wires": [
            [
                "50907519ece9b529"
            ]
        ]
    },
    {
        "id": "3af76b94d37ca5ff",
        "type": "link in",
        "z": "da1e5a53b04b1d78",
        "name": "Status",
        "links": [
            "cf2f0a9ff4857aca"
        ],
        "x": 105,
        "y": 1200,
        "wires": [
            [
                "8f246491eec01e12"
            ]
        ]
    },
    {
        "id": "1b0f87bcf57538b4",
        "type": "ui_text",
        "z": "da1e5a53b04b1d78",
        "group": "70fb931.dfc146c",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current latitude",
        "format": "{{msg.payload.lat}}",
        "layout": "row-spread",
        "className": "",
        "x": 400,
        "y": 120,
        "wires": []
    },
    {
        "id": "02693e82a6b73510",
        "type": "ui_text",
        "z": "da1e5a53b04b1d78",
        "group": "70fb931.dfc146c",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current longtitude",
        "format": "{{msg.payload.lon}}",
        "layout": "row-spread",
        "className": "",
        "x": 410,
        "y": 160,
        "wires": []
    },
    {
        "id": "b6b150ace5f7030d",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Set forecast string",
        "func": "let forecast = \"\";\n\nif (flow.get(\"outdoor\") == 1) {\n    for (let i = 1; i <= 6; i++) {\n        if (msg.payload.hourly[i].weather[0].main == \"Rain\") {\n            forecast += \"1\";\n        } else {\n            forecast += \"0\";\n        }\n    }\n} else {\n    forecast = \"000000\"\n}\n\nflow.set(\"forecast\", forecast);\n\nmsg.payload.rain = forecast;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 440,
        "wires": [
            [
                "0e7cc6f051800154",
                "2f17dca33b338448"
            ]
        ]
    },
    {
        "id": "7ea09f2132636b36",
        "type": "ui_switch",
        "z": "da1e5a53b04b1d78",
        "name": "",
        "label": "Outdoor",
        "tooltip": "Turn on to switch to outdoor mode which take weather forecast into account",
        "group": "70fb931.dfc146c",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 660,
        "y": 160,
        "wires": [
            [
                "c96ccc78bfaeea89"
            ]
        ]
    },
    {
        "id": "c96ccc78bfaeea89",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Set mode",
        "func": "if (msg.payload == true) {\n    flow.set(\"outdoor\", 1);\n} else {\n    flow.set(\"outdoor\", 0);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 220,
        "wires": [
            [
                "9cb35331ca9cbc0c"
            ]
        ]
    },
    {
        "id": "8337d7eaa962de62",
        "type": "comment",
        "z": "da1e5a53b04b1d78",
        "name": "README",
        "info": "If outdoor then weather forecast will be taking into account when deciding to activate watering system.\nElse forecast will be set to \"000000\".",
        "x": 660,
        "y": 120,
        "wires": []
    },
    {
        "id": "3ea792554450e098",
        "type": "switch",
        "z": "da1e5a53b04b1d78",
        "name": "Check watering status",
        "property": "status",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 400,
        "y": 640,
        "wires": [
            [
                "ca544546d4e37356"
            ],
            [
                "84f8011f781b85ba"
            ]
        ]
    },
    {
        "id": "9ad36ed0f9d9d46c",
        "type": "ui_button",
        "z": "da1e5a53b04b1d78",
        "name": "",
        "group": "f2c9d6d8312163b5",
        "order": 3,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Stop Watering",
        "tooltip": "",
        "color": "white",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Watering cycle stopped",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 680,
        "wires": [
            [
                "5ec393cb04298df7"
            ]
        ]
    },
    {
        "id": "0d661c4fad620917",
        "type": "ui_toast",
        "z": "da1e5a53b04b1d78",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Notice",
        "x": 850,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "ca544546d4e37356",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Idling",
        "func": "msg.payload = \"Watering cycle started\";\n\nflow.set(\"status\", 1);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 600,
        "wires": [
            [
                "0d661c4fad620917",
                "31b201c56bb821a0"
            ]
        ]
    },
    {
        "id": "84f8011f781b85ba",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Watering",
        "func": "msg.payload = \"A watering cycle is already in progress\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 640,
        "wires": [
            [
                "0d661c4fad620917"
            ]
        ]
    },
    {
        "id": "5ec393cb04298df7",
        "type": "switch",
        "z": "da1e5a53b04b1d78",
        "name": "Check watering status",
        "property": "status",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 400,
        "y": 680,
        "wires": [
            [
                "74140d3168cbdfd2"
            ],
            [
                "70b195856368c665"
            ]
        ]
    },
    {
        "id": "74140d3168cbdfd2",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Idling",
        "func": "msg.payload = \"No watering cycle in progress\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 680,
        "wires": [
            [
                "0d661c4fad620917"
            ]
        ]
    },
    {
        "id": "70b195856368c665",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Watering",
        "func": "msg.payload = \"Watering cycle stopped\";\n\nflow.set(\"status\", 0);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 720,
        "wires": [
            [
                "0d661c4fad620917",
                "31b201c56bb821a0"
            ]
        ]
    },
    {
        "id": "cf2f0a9ff4857aca",
        "type": "link out",
        "z": "da1e5a53b04b1d78",
        "name": "Manual Trigger",
        "mode": "link",
        "links": [
            "ac099b9c6c8d62cf",
            "fd6347de183b465c",
            "3af76b94d37ca5ff"
        ],
        "x": 1145,
        "y": 700,
        "wires": []
    },
    {
        "id": "31b201c56bb821a0",
        "type": "switch",
        "z": "da1e5a53b04b1d78",
        "name": "Switch state",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Watering cycle stopped",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Watering cycle started",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 700,
        "wires": [
            [
                "714b47d9f0f3ae2b"
            ],
            [
                "4c31f69cbcbe992a"
            ]
        ]
    },
    {
        "id": "714b47d9f0f3ae2b",
        "type": "change",
        "z": "da1e5a53b04b1d78",
        "name": "stopped",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 680,
        "wires": [
            [
                "cf2f0a9ff4857aca"
            ]
        ]
    },
    {
        "id": "4c31f69cbcbe992a",
        "type": "change",
        "z": "da1e5a53b04b1d78",
        "name": "started",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 720,
        "wires": [
            [
                "cf2f0a9ff4857aca"
            ]
        ]
    },
    {
        "id": "680c05be308a8403",
        "type": "comment",
        "z": "da1e5a53b04b1d78",
        "name": "ESP32",
        "info": "",
        "x": 130,
        "y": 1480,
        "wires": []
    },
    {
        "id": "873b86844395c2e1",
        "type": "comment",
        "z": "da1e5a53b04b1d78",
        "name": "Receive incoming requests",
        "info": "",
        "x": 190,
        "y": 1540,
        "wires": []
    },
    {
        "id": "9de12ca715b21ac2",
        "type": "comment",
        "z": "da1e5a53b04b1d78",
        "name": "Send data to ESP",
        "info": "",
        "x": 170,
        "y": 1740,
        "wires": []
    },
    {
        "id": "44bb414b79e45044",
        "type": "inject",
        "z": "da1e5a53b04b1d78",
        "name": "Receiving",
        "props": [
            {
                "p": "payload.data",
                "v": "006270500",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "x": 140,
        "y": 1580,
        "wires": [
            [
                "216abcdb955d7bb8"
            ]
        ]
    },
    {
        "id": "d1245cf1167eab6f",
        "type": "inject",
        "z": "da1e5a53b04b1d78",
        "name": "Sending",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1820,
        "wires": [
            [
                "e87a82820f207fee"
            ]
        ]
    },
    {
        "id": "322df3fdf9053341",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Sender",
        "func": "msg.payload = flow.get(\"send\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1780,
        "wires": [
            [
                "fbbb0fd576585582"
            ]
        ]
    },
    {
        "id": "f4f79605d7fafc24",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Receiver",
        "func": "// Format: [Status:1][Moisture:4][Threshold:4]\n\nflow.set(\"receive\", msg.payload.data);\n\nmsg.payload = msg.payload.data;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1580,
        "wires": [
            [
                "5889dbdcdbb3a573",
                "3f5213b694105839"
            ]
        ]
    },
    {
        "id": "5f961b11e0a02720",
        "type": "debug",
        "z": "da1e5a53b04b1d78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1820,
        "wires": []
    },
    {
        "id": "81bc32f486f1c448",
        "type": "debug",
        "z": "da1e5a53b04b1d78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1600,
        "wires": []
    },
    {
        "id": "fbbb0fd576585582",
        "type": "http response",
        "z": "da1e5a53b04b1d78",
        "d": true,
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1200,
        "y": 1780,
        "wires": []
    },
    {
        "id": "5889dbdcdbb3a573",
        "type": "http response",
        "z": "da1e5a53b04b1d78",
        "d": true,
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 800,
        "y": 1540,
        "wires": []
    },
    {
        "id": "e87a82820f207fee",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Data Encoder",
        "func": "// Format: [Year:2][Month:2][Day:2][Hour:2][Min:2][Sec:2][Status:1][Moisture:4][Threshold:4][Forecast:6]   \n\nconst isoStr = new Date().toLocaleString('en-GB', { timeZone: 'Asia/Singapore' });\n\nlet encoded = \"\";\n\nlet time = isoStr[8] + isoStr[9] +      // year\n            isoStr[3] + isoStr[4] +     // month\n            isoStr[0] + isoStr[1] +     // day\n            isoStr[12] + isoStr[13] +   // hour\n            isoStr[15] + isoStr[16] +   // min\n            isoStr[18] + isoStr[19];    // sec\n\nlet status = flow.get(\"status\");\n\nlet moistVal = flow.get(\"moist\");\nlet moist = \"\";\nif (moistVal < 1000) {\n    moist += 0;\n    if (moistVal < 100) {\n        moist += 0;\n        if (moistVal < 10) {\n            moist += 0;\n        }\n    }\n}\nmoist += moistVal;\n\nlet thresVal = flow.get(\"threshold\");\nlet threshold = \"\";\nif (thresVal < 1000) {\n    threshold += 0;\n    if (thresVal < 100) {\n        threshold += 0;\n        if (thresVal < 10) {\n            threshold += 0;\n        }\n    }\n}\nthreshold += thresVal;\n\nlet forecast = flow.get(\"forecast\");\n\nlet message = time + status + moist + threshold + forecast;\n\nflow.set(\"send\", message);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1780,
        "wires": [
            [
                "36cbf1992d47a60c"
            ]
        ]
    },
    {
        "id": "141a769d277582ed",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Get moisture value",
        "func": "msg.payload = flow.get(\"moisture\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1280,
        "wires": [
            [
                "0dd3f3c51bb74ce0",
                "8e8edaf996cecc25"
            ]
        ]
    },
    {
        "id": "3f5213b694105839",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Data Decoder",
        "func": "data = flow.get(\"receive\");\n\nflow.set(\"status\", parseInt(data[0]));\n\nlet moist = \"\";\nfor (let i = 1; i < (1 + 4); i++) {\n    moist += data[i];\n}\nflow.set(\"moisture\", parseInt(moist));\n\nlet threshold = \"\";\nfor (let i = 5; i < (4 + 4); i++) {\n    threshold += data[i];\n}\nflow.set(\"threshold\", parseInt(threshold));\n\nmsg.payload = data;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1600,
        "wires": [
            [
                "81bc32f486f1c448",
                "aa3b7c38995505cf"
            ]
        ]
    },
    {
        "id": "aa3b7c38995505cf",
        "type": "link out",
        "z": "da1e5a53b04b1d78",
        "name": "http",
        "mode": "link",
        "links": [
            "52893c70cd8cc2a0",
            "fd6347de183b465c",
            "c8270456e0080dd9",
            "fb1c019a15b2c764"
        ],
        "x": 955,
        "y": 1640,
        "wires": []
    },
    {
        "id": "52893c70cd8cc2a0",
        "type": "link in",
        "z": "da1e5a53b04b1d78",
        "name": "",
        "links": [
            "aa3b7c38995505cf"
        ],
        "x": 105,
        "y": 1280,
        "wires": [
            [
                "141a769d277582ed"
            ]
        ]
    },
    {
        "id": "fd6347de183b465c",
        "type": "link in",
        "z": "da1e5a53b04b1d78",
        "name": "",
        "links": [
            "aa3b7c38995505cf",
            "cf2f0a9ff4857aca"
        ],
        "x": 95,
        "y": 960,
        "wires": [
            [
                "2b7e47fc9fcd47f2"
            ]
        ]
    },
    {
        "id": "0e7cc6f051800154",
        "type": "debug",
        "z": "da1e5a53b04b1d78",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.rain",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 440,
        "wires": []
    },
    {
        "id": "4b0de04b9bc29a14",
        "type": "inject",
        "z": "da1e5a53b04b1d78",
        "name": "Default values",
        "props": [
            {
                "p": "payload.lat",
                "v": "10.8",
                "vt": "num"
            },
            {
                "p": "payload.lon",
                "v": "106.7",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "x": 160,
        "y": 260,
        "wires": [
            [
                "45dcee17b0912e43"
            ]
        ]
    },
    {
        "id": "210129f7c6f3d3c9",
        "type": "link out",
        "z": "da1e5a53b04b1d78",
        "name": "Update Status",
        "mode": "link",
        "links": [
            "7f0e9344b813bff1"
        ],
        "x": 435,
        "y": 1000,
        "wires": []
    },
    {
        "id": "7f0e9344b813bff1",
        "type": "link in",
        "z": "da1e5a53b04b1d78",
        "name": "",
        "links": [
            "210129f7c6f3d3c9",
            "2f17dca33b338448",
            "fac23bff5084166b"
        ],
        "x": 185,
        "y": 1780,
        "wires": [
            [
                "e87a82820f207fee"
            ]
        ]
    },
    {
        "id": "fac23bff5084166b",
        "type": "link out",
        "z": "da1e5a53b04b1d78",
        "name": "Update Threshold",
        "mode": "link",
        "links": [
            "7f0e9344b813bff1"
        ],
        "x": 695,
        "y": 860,
        "wires": []
    },
    {
        "id": "2f17dca33b338448",
        "type": "link out",
        "z": "da1e5a53b04b1d78",
        "name": "Update Weather",
        "mode": "link",
        "links": [
            "7f0e9344b813bff1"
        ],
        "x": 1195,
        "y": 480,
        "wires": []
    },
    {
        "id": "d8adb61b5cfa83d6",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Formatter",
        "func": "let raw = flow.get(\"send\");\nlet fmt = \"\";\n\nfmt += \"Year: \" + raw[0] + raw[1] + \" || \";\nfmt += \"Month: \" + raw[2] + raw[3] + \" || \";\nfmt += \"Day: \" + raw[4] + raw[5] + \" || \";\nfmt += \"Hour: \" + raw[6] + raw[7] + \" || \";\nfmt += \"Minute: \" + raw[8] + raw[9] + \" || \";\nfmt += \"Second: \" + raw[10] + raw[11] + \" || \";\nfmt += \"Status: \" + raw[12] + \" || \";\nfmt += \"Moisture: \" + raw[13] + raw[14] + raw[15] + raw[16] + \" || \";\nfmt += \"Threshold: \" + raw[17] + raw[18] + raw[19] + raw[20] + \" || \";\nfmt += \"Forecast: \" + raw[21] + raw[22] + raw[23] + raw[24] + raw[25] + raw[26];\n\nmsg.payload = raw + \" || \" + fmt;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1820,
        "wires": [
            [
                "5f961b11e0a02720"
            ]
        ]
    },
    {
        "id": "9cb35331ca9cbc0c",
        "type": "link out",
        "z": "da1e5a53b04b1d78",
        "name": "Update Mode",
        "mode": "link",
        "links": [
            "fb1c019a15b2c764"
        ],
        "x": 775,
        "y": 220,
        "wires": []
    },
    {
        "id": "38d1335d89cfd924",
        "type": "rbe",
        "z": "da1e5a53b04b1d78",
        "name": "Prevent Duplication",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 790,
        "y": 1780,
        "wires": [
            [
                "322df3fdf9053341",
                "d8adb61b5cfa83d6"
            ]
        ]
    },
    {
        "id": "216abcdb955d7bb8",
        "type": "rbe",
        "z": "da1e5a53b04b1d78",
        "name": "Prevent Duplication",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 370,
        "y": 1580,
        "wires": [
            [
                "f4f79605d7fafc24"
            ]
        ]
    },
    {
        "id": "36cbf1992d47a60c",
        "type": "function",
        "z": "da1e5a53b04b1d78",
        "name": "Exclude Timestamp",
        "func": "msg.payload = flow.get(\"send\").slice(12);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1780,
        "wires": [
            [
                "38d1335d89cfd924"
            ]
        ]
    },
    {
        "id": "3fc9b79ee9d4150f",
        "type": "comment",
        "z": "da1e5a53b04b1d78",
        "name": "About http message format...",
        "info": "Note: [{Name-of-property}:{Number-of-character}]\n\nThe string receive from ESP (composed by Arduino) will follow the format:\n[Status:1][Moisture:4][Threshold:4]\n\nThe string to be sent to ESP and to save on cloud service:\n[Year:2][Month:2][Day:2][Hour:2][Min:2][Sec:2][Status:1][Moisture:4][Threshold:4][Forecast:6]",
        "x": 320,
        "y": 1480,
        "wires": []
    },
    {
        "id": "70fb931.dfc146c",
        "type": "ui_group",
        "name": "Weather",
        "tab": "4bb34f67.69a87",
        "order": 4,
        "disp": false,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f2c9d6d8312163b5",
        "type": "ui_group",
        "name": "Data",
        "tab": "4bb34f67.69a87",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e1ed05e8d05a9e01",
        "type": "ui_group",
        "name": "Humidity Threshold",
        "tab": "4bb34f67.69a87",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4bb34f67.69a87",
        "type": "ui_tab",
        "name": "CapstoneProject",
        "icon": "fa-thermometer-half",
        "order": 3,
        "disabled": false,
        "hidden": false
    }
]
